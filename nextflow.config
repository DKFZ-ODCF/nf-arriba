/**
*  Configuration for the DKFZ-ODCF/Arriba Nextflow workflow.
*  Author: Sebastian Uhrig
*/

nextflowVersion = '>= 19.07.0.5106'

params.fastq1         = "$baseDir/dummy_files/fastq1"                                                              // comma-separated list of FastQ files to align (mate1)
params.fastq2         = "$baseDir/dummy_files/fastq2"                                                              // comma-separated list of FastQ files to align (mate2; omit for single-end data)
params.bam            = "$baseDir/dummy_files/bam"                                                                 // alternatively to FastQ files, a single BAM file may be provided to be realigned
params.sophiaSVs      = "$baseDir/dummy_files/sophiaSVs"                                                           // (optional) path to Sophia structural variants to annotate matching fusion breakpoints
params.outputDir      = ""                                                                                         // where to store the results
params.arribaVersion  = "2.3.0"                                                                                    // Arriba version to run
params.threads        = 12                                                                                         // number of threads to use for alignment/sorting
params.memory         = 100000                                                                                     // memory limit [MB]
availablePresets      = ['hs37d5+GENCODE19', 'GRCh38+GENCODE28', 'GRCm38+GENCODEM25', 'GRCm39+GENCODEM26']         // predefined sets of data files
params.preset         = availablePresets[0]                                                                        // choose a preset by default
assembly              = params.preset - ~/\+.*/                                                                    // extract assembly from preset
annotation            = params.preset - ~/.*\+/                                                                    // extract annotation from preset
params.dataDir        = "$baseDir/data/"                                                                           // location of data files
params.starIndex      = params.dataDir + "STAR_index_" + assembly + "viral_" + annotation                          // STAR index directory
params.assembly       = params.dataDir + assembly + "viral.fa"                                                     // reference genome assembly in FastA format
params.annotation     = params.dataDir + annotation + ".gtf"                                                       // gene model in GTF format
params.blacklist      = params.dataDir + "blacklist_*"       + assembly + "*_v" + params.arribaVersion + ".tsv.gz" // blacklist to remove recurrent false positive fusion calls
params.knownFusions   = params.dataDir + "known_fusions_*"   + assembly + "*_v" + params.arribaVersion + ".tsv.gz" // file with known fusions for improved sensitivity
params.proteinDomains = params.dataDir + "protein_domains_*" + assembly + "*_v" + params.arribaVersion + ".gff3"   // protein domains in GFF3 format to annotate domains retained in fusions
params.cytobands      = params.dataDir + "cytobands_*"       + assembly + "*_v" + params.arribaVersion + ".tsv"    // file with cytobands to draw ideograms in fusion plots
params.viralContigs   = "^[AN]C_"                                                                                  // regular expression matchings names of viral contigs
params.ignoreViruses  = "Coliphage"                                                                                // regular expression of viruses to omit from the results


manifest {
	homePage = 'https://github.com/DKFZ-ODCF/nf-arriba'
	description = 'Gene fusion detection using Arriba'
	mainScript = 'main.nf'
	version = '0.3.0'
	author = 'Sebastian Uhrig'
}


profiles {

	local {
		process {
			executor = 'local'
		}
	}

	lsf {
		process {
			executor = 'lsf'
		}
	}

	dkfzLsf {
		process {
			executor = 'lsf'
			scratch = '$SCRATCHDIR/$LSB_JOBID'
		}
	}

	conda {
		process {
			conda = "$baseDir/task-environment.yml"
		}
		conda.cacheDir = "$baseDir/conda_env"
	}

	docker {
		docker.enabled = true
		docker.runOptions='-u $(id -u):$(id -g)'
		process {
			container = 'nf-arriba:' + manifest.version
		}
	}

	singularity {
		process.container = 'nf-arriba_' + manifest.version + '.sif'
		singularity.enabled = true
		singularity.cacheDir = "$baseDir"       // Assume the Singularity image is in the workflow directory.
		singularity.autoMounts = true
	}

	dkfzModules {
		process {
			beforeScript = """
				module purge
				module load arriba/$params.arribaVersion
				module load samtools/1.14
				module load star/2.7.10a
			"""
		}
	}

}
